rule KRP_TA0001_T1190_PRD_WAF_XSS_detection {
  meta:
    author = "Enzo Silva Bomfim"
    description = "Detects XSS (cross site scripting) attempts in web traffic"
    type = "alert"
    severity = "high"
    mitre_attack_tactic = "Initial Access"
    mitre_attack_technique = "Exploit Public-Facing Application"
    mitre_attack_technique_id = "T1190"
    mitre_attack_url = "https://attack.mitre.org/techniques/T1190/"
  events:
   $e.event.metadata.product_name = "XXXXXXXX" 
    $e.event.security_result.action != "BLOCK" 
    (
        re.regex($e.network.http.referral_url, "(?i)<script[^>]*>.*?</script>") or
        // Basic XSS using <script> tags
        re.regex($e.network.http.referral_url, "(?i)<img[^>]*\\s+onerror\\s*=\\s*['\"]?(.*?)['\"]?[^>]*>") or
        // XSS using <img> tag with onerror
        re.regex($e.network.http.referral_url, "(?i)<iframe[^>]*\\s+srcdoc\\s*=\\s*['\"]?(.*?)['\"]?[^>]*>") or
        // XSS using <iframe> with srcdoc attribute
        re.regex($e.network.http.referral_url, "(?i)<svg[^>]*\\s+onload\\s*=\\s*['\"]?(.*?)['\"]?[^>]*>") or
        // XSS using <svg> tag with onload
        re.regex($e.network.http.referral_url, "(?i)javascript\\s*:\\s*(.*?)(?:\\r|\\n|;)?") or
        // XSS using javascript: protocol
        //re.regex($e.network.http.referral_url, "(?i)data\\s*:\\s*(.*?)(?:\\r|\\n|;)?") or
        // XSS using data: protocol
        re.regex($e.network.http.referral_url, "(?i)\\b(?:on(?:mouse(?:over|out|down|up|move)|focus|blur|click|key(?:press|down|up)|load|error|submit|reset|change))\\s*=\\s*['\"]?(.*?)['\"]?") or
        // XSS using various HTML event handlers
        re.regex($e.network.http.referral_url, "(?i)alert\\s*\\((.*?)\\)") or
        // XSS with alert() function call
        re.regex($e.network.http.referral_url, "(?i)document\\s*\\.\\s*cookie") or
        // XSS with document.cookie
        re.regex($e.network.http.referral_url, "(?i)document\\s*\\.\\s*location") or
        // XSS with document.location
        re.regex($e.network.http.referral_url, "(?i)base64\\s*\\((.*?)\\)") or
        // XSS using base64 function
        re.regex($e.network.http.referral_url, "(?i)<!--.*?-->") or
        // Log HTML comment bypass attempts which can contain XSS payloads
        re.regex($e.network.http.referral_url, "(?i)[`'\"][^'\"]*[<>/](?:[^'\"]*[<>/])?[`'\"]")
        // Log XSS attempts that use unescaped quotes
    )
    $e.event.security_result.action = $action
    match:
        $action over 1h
  outcome:
    $mitre_attack_tactic = array_distinct("Initial Access")
    $mitre_attack_technique = array_distinct("Exploit Public-Facing Application")
    $mitre_attack_technique_id = array_distinct("T1190")
    $source_ip = array_distinct($e.src.ip)
    $http_method = array_distinct($e.network.http.method)
    $user_agent = array_distinct($e.network.http.user_agent)

  condition:
    $e
}
